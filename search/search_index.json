{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to BOMBE Docs","text":"<p>Welcome to BOMBE Docs!</p> <p>BOMBE (Battle Of Malware Bypass and EDR) is a match where malware and EDR systems compete against each other inside a single VM. It's like a Attack and Defense style of CTF, but different! We will provide quick start guide and some direction for those who are new to this field.</p>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"Learn/EDR/API-Hooking/","title":"API Hooking","text":""},{"location":"Learn/EDR/ETW/","title":"ETW","text":""},{"location":"Learn/EDR/Yara/","title":"Yara","text":""},{"location":"Learn/Malware/Bypass-API-Hooking/","title":"Bypass API Hooking","text":"<p>API hooking modifies the content of Windows APIs in system libraries (e.g., <code>ntdll.dll</code>, <code>kernel32.dll</code>, ...) in memory to place hooks and hijack the control flow. There are basically two methods to bypass API hooking. One method is to restore the original system library in memory, and the other method is to bypass Windows APIs altogether and call syscall directly.</p> <p>To restore system library, such as <code>ntdll.dll</code>, in memory comes several ways:</p> <ul> <li>Read <code>ntdll.dll</code> from filesystem and overwrite <code>ntdll.dll</code> in memory</li> <li>Map <code>\\KnownDlls\\ntdll.dll</code> section to memory</li> </ul> <p>However, there are some disadvantages to restoring system libraries. First, you still need to call Windows APIs to read the file, which are monitored by EDR. Second, EDR can reapply API hooking.</p> <p>The second method is to call syscalls directly, avoiding Windows APIs altogether. Unlike Linux, Windows changes the mapping of SSNs (System Service Numbers) frequently. To call syscalls in Windows, you need to know the SSN mapping for different Windows versions. There are various ways to obtain this mapping:</p> <ul> <li>SSN mapping maintained by SysWhisper</li> <li>Parsing <code>Nt-</code> / <code>Zw-</code> APIs from <code>ntdll.dll</code> in memory and sorting them by address, which is a preferred method nowadays. This approach allows us to avoid maintaining the SSN mapping ourselves, as we can derive it from <code>ntdll.dll</code>. SysWhispers3 implement this kind of method.</li> </ul> <p>EDR can easily detect syscall behavior by statically scanning for syscall patterns, as normal programs do not use syscalls directly. To avoid detection, malware can generate the syscall assembly at runtime, a technique implemented as <code>egghunter</code> in SysWhispers3.</p> <p>Additionally, EDR can detect syscall behavior by examining the program's call stack. Typically, a program will enter the kernel directly instead of going through <code>ntdll.dll</code>. To evade this, malware can use a syscall gadget and jump to ntdll.dll after setting the SSN in the rax register. This technique is implemented as <code>jumper</code> in SysWhispers3.</p>"},{"location":"Learn/Malware/Bypass-API-Hooking/#tools","title":"Tools","text":"<ul> <li>https://github.com/jthuraisamy/SysWhispers</li> <li>https://github.com/jthuraisamy/SysWhispers2</li> <li>https://github.com/klezVirus/SysWhispers3</li> <li>https://github.com/crummie5/FreshyCalls</li> </ul>"},{"location":"Learn/Malware/Bypass-API-Hooking/#resource","title":"Resource","text":"<ul> <li>https://klezvirus.github.io/RedTeaming/AV_Evasion/NoSysWhisper/</li> <li>https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/</li> <li>https://www.crow.rip/crows-nest/mal/dev/inject/syscalls/indirect-syscalls</li> <li>https://dosxuz.gitlab.io/post/perunsfart/</li> <li>https://blog.sektor7.net/#!res/2021/perunsfart.md</li> </ul>"},{"location":"Learn/Malware/ETW-Patch/","title":"ETW Patch","text":""},{"location":"Learn/Malware/Obfuscation/","title":"Obfuscation","text":""},{"location":"Learn/Malware/PPID-Spoofing/","title":"PPID Spoofing","text":""},{"location":"Learn/Malware/Packing/","title":"Packing","text":""},{"location":"Learn/Malware/Process-Injection/","title":"Process Injection","text":""}]}